//--------------------------------------
//--- 010 Editor v4.0.4 Binary Template
//
// File:
// Author: sinsyy acgngca
// Revision:
// Purpose:
//--------------------------------------
#include "010_def.bt.h"

// 核心回路定义 部分
//-----------------------------------------------------------------------------------------------------------
wstring MasterQuartzIndex2Name(ulong index)
{
    local wstring name;
    switch (index)
    {
        case 0:     name = L"力量 フォース"     ;   break;
        case 1:     name = L"盾牌 シールド"     ;   break;
        case 2:     name = L"妖精 ピクシィ"     ;   break;
        case 3:     name = L"利爪 クロウ"       ;   break;
        case 4:     name = L"白金 プラチナ"     ;   break;
        case 5:     name = L"幻象 ミラージュ"   ;   break;
        case 6:     name = L"战斧 アックス"     ;   break;
        case 7:     name = L"法则 カノン"       ;   break;
        case 8:     name = L"羽翼 ウィング"     ;   break;
        case 9:     name = L"神佑 イージス"     ;   break;
        case 10:    name = L"王权 セプター"     ;   break;
        case 11:    name = L"魅影 ファントム"   ;   break;
        case 12:    name = L"守护 キーパー"     ;   break;
        case 13:    name = L"无限 メビウス"     ;   break;
        case 14:    name = L"小丑 ジャグラー"   ;   break;
        case 15:    name = L"罪恶 クリミナル"   ;   break;
        case 16:    name = L"草剃 クサナギ"     ;   break;
        case 17:    name = L"纹章 エンブレム"   ;   break;
        case 18:    name = L"灵猫 カッツェ"     ;   break;
        case 19:    name = L"骑士 シュバリエ"   ;   break;
        case 20:    name = L"贤者 マギウス"     ;   break;
        case 21:    name = L"草剃 クサナギ"     ;   break;
        default:    name = L"nul"               ;
    }
    string  str;
    SPrintf(str, "0x%X ", 0xDC + index);
    //SPrintf(str, "0x%0*X ", Random(4) + 2, 0xDC + index);
    return  StringToWString(str) + name;
}

typedef struct _MasterQuartzLv
{
    //注除HP,SPD外, 其它*10
    ushort  HP_up;
    ubyte   EP_up;
    ubyte   STR_up;
    ubyte   DEF_up;
    ubyte   ATS_up;
    ubyte   ADF_up;
    ubyte   SPD_up;
    ubyte   Effect1ST;      // 回合数
    ubyte   Effect1Rate;    // 增加比率
    ubyte   Effect2ST;      // 回合数
    ubyte   Effect2Rate;    // 增加比率
    ushort  MasterArt;      // 核心魔法
    ubyte   IntroIndex[6];  // 6行文字显示索引, 与下面MMintro数组索引对应

    local UINT i;
    for (i = 0; i < 6; ++i)
    {
        FSeek(addrIntro[IntroIndex[i]] + addrFileBase);
        String Intro;
    }
    FSeek(startof(IntroIndex) + sizeof(IntroIndex));
} MasterQuartzLv <read=readMasterQuartzLv, write=writeMasterQuartzLv>;

string readMasterQuartzLv(MasterQuartzLv &a)
{
    string s;
    SPrintf(s, "%d %d %d %d %d", a.Effect1ST, a.Effect1Rate, a.Effect2ST, a.Effect2Rate, a.MasterArt);
    return s;
}

void writeMasterQuartzLv(MasterQuartzLv &a, string s) {;}


typedef struct(int parMasterQuartz)
{
    local ULONG Index;
    for (Index = 0; Index < 5; ++Index)
    {
        MasterQuartzLv  Lv;
    }

    Index = parMasterQuartz;
} MasterQuartz <read=readMasterQuartz, write=writeMasterQuartz>;

wstring readMasterQuartz(MasterQuartz &a)
{
    wstring wstr = MasterQuartzIndex2Name(a.Index);
    return  wstr + GenerateWStringByFill(L' ', 24 - WStrWidth(wstr)) + StringToWString(a.Lv[4].Intro[0].str, GetFileCharSet());
}

void writeMasterQuartz(MasterQuartz &a, string s) {;}

typedef struct
{
    local ULONG     addrFileBase = FTell();
    local ULONG     i;

    FSeek(addrFileBase + 0x64 * MASTER_QUARTZ_COUNT);
    ushort addrIntro[MASTER_QUARTZ_COUNT * 5 * 6] <hidden=true>;

    FSeek(addrFileBase);
    for (i = 0; i < MASTER_QUARTZ_COUNT; ++i)
    {
        MasterQuartz masterQuartz(i);
    }
} T_mstqrt <read=readT_mstqrt>;

wstring readT_mstqrt(T_mstqrt &a)
{
    return  L"核心回路";
}

if (!exists(MASTER_QUARTZ_COUNT))
{
    local ULONG MASTER_QUARTZ_COUNT = 0x16;
}

if (!IsProcess() && FTell() == 0)
{
    T_mstqrt    masterQuartzTable <open=true>;
}

