//--------------------------------------
//--- 010 Editor v4.0.4 Binary Template
//
// File:
// Author:
// Revision:
// Purpose:
//--------------------------------------
//#include "ED6_common_define.bt.h"
//#define ED6_FC        0x01
//#define ED6_SC        0x02
//#define ED6_3RD       0x04
//#define ED_ZERO       0x08
#define ED_AO       0x10
//local int ED6_NO = ED6_SC;
#include "ED6_common.bt.h"

// DT
Assert(IsProcess(), "It's not a process!");
//Printf("%x\r\n", ReadUInt(ProcessHeapToLocalAddress(0)));

local uint addrCGLOBAL = ReadUInt(ProcessHeapToLocalAddress(0xC29988));
local uint addrCGLOBALLocal = ProcessHeapToLocalAddress(addrCGLOBAL);
local uint addrBase = addrCGLOBALLocal;
local uint addrCEDAO = addrCGLOBALLocal;
local uint addrCScript = addrCEDAO + 0x384EC;
local uint addrCActor = ProcessHeapToLocalAddress(ReadUInt(addrCScript));
//local uint addrCQuest = ProcessHeapToLocalAddress(ReadUInt(addrCScript+0x8) + 0x4D428);
local uint addrCQuest = addrCEDAO + 0x4D428;
local uint addrMemCBattle = ReadUInt(ProcessHeapToLocalAddress(addrCGLOBAL+0x82BA4));
//local uint addrTextGroupA = ReadUInt(ProcessHeapToLocalAddress(addrMemCBattle+0x38D24))+0x4D3E8;
local uint addrTextGroupA = addrCGLOBAL+0x4D3E8;
    FSeek(ProcessHeapToLocalAddress(addrTextGroupA) + 0x04);
    uint addrMemT_crfget_entry <format=hex, hidden=true>;
    uint addrMemT_item <format=hex, hidden=true>;
    uint addrMemT_ittxt <format=hex, hidden=true>;
    uint addrMemT_item2 <format=hex, hidden=true>;
    uint addrMemT_ittxt2 <format=hex, hidden=true>;
    uint addrMemT_quartz <format=hex, hidden=true>;
    uint addrMemT_mstqrt <format=hex, hidden=true>;
    uint addrMemT_magic <format=hex, hidden=true>;
    uint addrMemT_crfget <format=hex, hidden=true>;
    uint addrMemT_magqrt <format=hex, hidden=true>;
    uint addrMemT_town <format=hex, hidden=true>;
    uint addrMemT_cook <format=hex, hidden=true>;
    uint addrMemT_trade <format=hex, hidden=true>;

    local uint addrT_crfget_entry = ProcessHeapToLocalAddress(addrMemT_crfget_entry);
    local uint addrT_item = ProcessHeapToLocalAddress(addrMemT_item);
    local uint addrT_ittxt = ProcessHeapToLocalAddress(addrMemT_ittxt);
    local uint addrT_item2 = ProcessHeapToLocalAddress(addrMemT_item2);
    local uint addrT_ittxt2 = ProcessHeapToLocalAddress(addrMemT_ittxt2);
    local uint addrT_quartz = ProcessHeapToLocalAddress(addrMemT_quartz);
    local uint addrT_mstqrt = ProcessHeapToLocalAddress(addrMemT_mstqrt);
    local uint addrT_magic = ProcessHeapToLocalAddress(addrMemT_magic);
    local uint addrT_crfget = ProcessHeapToLocalAddress(addrMemT_crfget);
    local uint addrT_magqrt = ProcessHeapToLocalAddress(addrMemT_magqrt);
    local uint addrT_town = ProcessHeapToLocalAddress(addrMemT_town);
    local uint addrT_cook = ProcessHeapToLocalAddress(addrMemT_cook);
    local uint addrT_trade = ProcessHeapToLocalAddress(addrMemT_trade);

//local uint addrT_magic = ProcessHeapToLocalAddress(ReadUInt(ProcessHeapToLocalAddress(addrTextGroupA+0x20)));

local uint addrTextGroupB = addrCGLOBAL+0x82BC0;
FSeek(ProcessHeapToLocalAddress(addrTextGroupB));
uint addrMemT_name <format=hex, hidden=true>;
uint addrMemT_sltget <format=hex, hidden=true>;
uint addrMemT_quest <format=hex, hidden=true>;
uint addrMemT_memo <format=hex, hidden=true>;
uint addrMemT_orb <format=hex, hidden=true>;
uint addrMemT_world <format=hex, hidden=true>;
FSkip(0x8);
uint addrMemT_bgm <format=hex, hidden=true>;
uint addrMemT_record <format=hex, hidden=true>;
uint addrMemT_msas <format=hex, hidden=true>;
uint addrMemT_friend <format=hex, hidden=true>;

local uint addrT_name = ProcessHeapToLocalAddress(addrMemT_name);
local uint addrT_sltget = ProcessHeapToLocalAddress(addrMemT_sltget);
local uint addrT_quest = ProcessHeapToLocalAddress(addrMemT_quest);
local uint addrT_memo = ProcessHeapToLocalAddress(addrMemT_memo);
local uint addrT_orb = ProcessHeapToLocalAddress(addrMemT_orb);
local uint addrT_world = ProcessHeapToLocalAddress(addrMemT_world);
local uint addrT_bgm = ProcessHeapToLocalAddress(addrMemT_bgm);
local uint addrT_record = ProcessHeapToLocalAddress(addrMemT_record);
local uint addrT_msas = ProcessHeapToLocalAddress(addrMemT_msas);
local uint addrT_friend = ProcessHeapToLocalAddress(addrMemT_friend);

////////////////////////////////////////////////////////////////////////////////////////////////////////
// table
////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "t_magic.bt"
FSeek(addrT_magic);
T_magic         magicTable;

#include "zero_ao_t_name.bt"
FSeek(addrT_name);
T_name          characterTable;

#include "zero_ao_t_record.bt"
//FSeek(addrT_record);
//T_record      recordTable;

#include "zero_ao_t_town.bt"
FSeek(addrT_town);
T_town          townTable;

//local uint MasterQuartzCount = 0x16;
#include "ao_t_mstqrt.bt"
FSeek(addrT_mstqrt);
T_mstqrt        masterQuartzTable;

#include "ao_t_quest.bt"

////////////////////////////////////////////////////////////////////////////////////////////////////////
// scena
////////////////////////////////////////////////////////////////////////////////////////////////////////
    //FSeek(ProcessHeapToLocalAddress(addrCGLOBAL) + 0x384EC + 0x7D4);  // 0x38EA8
    FSeek(addrCScript + 0x7D4);
    uint addrMemScenaFile[6] <format=hex, hidden=true>;

    //FSeek(ProcessHeapToLocalAddress(addrCGLOBAL) + 0x78F74);
    FSeek(addrCActor + 0x2BC);
    uint addrMemScenaStart1 <format=hex, hidden=true>;
    uint addrMemScenaStart2 <format=hex, hidden=true>;
    int  scenaCharacterAmount <hidden=true>;    // 最多0x80个

    local uint addrScenaFileIndex; // 循环用
    local uint addrScenaFile[6];
    for (addrScenaFileIndex = 0; addrScenaFileIndex < 6; addrScenaFileIndex++)
    {
        addrScenaFile[addrScenaFileIndex] = ProcessHeapToLocalAddress(addrMemScenaFile[addrScenaFileIndex]);
    }

    local uint addrScenaStart1 = ProcessHeapToLocalAddress(addrMemScenaStart1);
    local uint addrScenaStart2 = ProcessHeapToLocalAddress(addrMemScenaStart2);
// 场景文件和战斗信息初始化 部分
#include "zero_ao_scena.bt"

    // 场景文件in内存
    if (addrMemScenaFile[0] != 0)
    {
        // 五个可能的子文件
        if (ReadUInt(0x20 + addrScenaFile[0]) != 0xFFFFFFFF && addrMemScenaFile[1] != 0)
        {
            FSeek(addrScenaFile[1]);
            ScenaFile   scenaFile1(addrScenaFile[1]);
        }
        if (ReadUInt(0x24 + addrScenaFile[0]) != 0xFFFFFFFF && addrMemScenaFile[2] != 0)
        {
            FSeek(addrScenaFile[2]);
            ScenaFile   scenaFile2(addrScenaFile[2]);
        }
        if (ReadUInt(0x28 + addrScenaFile[0]) != 0xFFFFFFFF && addrMemScenaFile[3] != 0)
        {
            FSeek(addrScenaFile[3]);
            ScenaFile   scenaFile3(addrScenaFile[3]);
        }
        if (ReadUInt(0x2C + addrScenaFile[0]) != 0xFFFFFFFF && addrMemScenaFile[4] != 0)
        {
            FSeek(addrScenaFile[4]);
            ScenaFile   scenaFile4(addrScenaFile[4]);
        }
        if (ReadUInt(0x30 + addrScenaFile[0]) != 0xFFFFFFFF && addrMemScenaFile[5] != 0)
        {
            FSeek(addrScenaFile[5]);
            ScenaFile   scenaFile5(addrScenaFile[5]);
        }

        FSeek(addrScenaFile[0]);    // =? addrBase + 0xC3880
        ScenaFile   scenaFile(addrScenaFile[0]);

    }
/*
    // 具体化的角色信息，1包括外形，2包括怪的战斗参数
    if (addrMemScenaStart1 != 0 && scenaCharacterAmount != 0)
    {
        FSeek(addrScenaStart1);
        ScenaCharacterInf1Group     scenaCharacterInf1;
    }

    if (addrMemScenaStart2 != 0 && scenaCharacterAmount != 0)
    {
        FSeek(addrScenaStart2);
        ScenaCharacterInf2Group     scenaCharacterInf2;
    }
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////
// CActor
////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct
{
    FSeek(addrCActor + 0x94);
    ULONG           SystemFlag[2];
    FSeek(addrCActor + 0x9C);
    //ubyte         EXPR_1E[0x220] <format=hex>;
    ubyte           Flag[0x220] <format=hex>;

    // 角色信息 战斗外
SetForeColor(cBlue);
    //FSeek(addrBase + 0x78F84);
    //FSeek(ProcessHeapToLocalAddress(ReadUInt(addrBase + 0x384EC) + 0x2CC));
    FSeek(addrCActor + 0x2CC);
    ushort          Team[8];
    ushort          TeamB[8];
SetForeColor(cNone);

    //FSeek(ProcessHeapToLocalAddress(ReadUInt(addrBase + 0x384EC) + 0x2EC));
    STATUS          Status[12];
    // 0x79438
    EQUIP           Equip[12];
    //
    ARTS            Arts[12];
    //
    CRAFT           Craft[12];
    //
    SCRAFT          SCraft[12];
    // 0x79D98
    ORBMENT         Orbment[12] <optimize=true>;

    // 拥有的物品及数量
    //FSeek(addrBase + 0x79D3C);
    //ItemInBagGroup    itemInBag;
    ushort  itemInBag;

    FSeek(addrCActor + 0x4444);
    //COORD         MasterQuartzLvExp[MasterQuartzCount];
    COORD           MasterQuartzLvExp[0x1E];
    FSeek(addrBase + 0x7D264);
    POSITION        Position[16] <optimize=true>;   // 最后两个和Mira地址一样

    FSeek(addrBase + 0x7D280);
    int         Mira;
    FSkip(4);
    int         Medal ;//<hidden=true>;
    FSkip(4);
    FSkip(4);
    //int           DP_nextLv;
    int         DP; // Detective Point
    int         Sepith[7];

SetForeColor(cBlue);
    FSeek(addrCActor + 0x6118);
    int             BurstEnergy;

    //FSeek(addrBase + 0x78CB8 + 0x6140);
    FSeek(addrCActor + 0x6140);
    ushort          Replace[12];    // 替换形象，人物代码

    FSeek(addrBase + 0x7EE10);
    ushort          SBreak[12];     // S爆发技设定

    FSeek(addrCActor + 0x61A0);
    ubyte           Feelings[0x10];
// 64 琪雅；65 艾莉；66 缇欧；67 兰迪；68 诺艾尔；69 瓦吉；6A 莉夏；6B 达德利警官；6C 伊莉娅小姐；6D 塞茜尔姐姐；6E 芙兰；6F 修利

    FSeek(addrBase + 0xA6FA5);
    enum <ubyte> DIFFICULTY { Normal = 0, Hard, Nightmare, Easy } Difficulty;
SetForeColor(cNone);

//////////////////////////////////////////////////////////////////////////////////
    local uint addrTemp = FTell();
    FSeek(ProcessHeapToLocalAddress(ReadUInt(addrBase + 0x82B20)) + 0x18);
    float           gameSpeed;

    FSeek(addrBase + 0x81C7C);
    ArrayBytes      Record(8);      // 48个标志位，全成就6个F

    FSeek(addrBase + 0x78CB8 + 0x848E);
    COORD           BgmReplace[0x10];

    FSeek(addrCActor + 0x4F84);
    int             ScenaCode <format=hex>;         // 场景代码
    int             ScenaNode;                      // 场景中的出入口代码，貌似都是从0x64开始的 EntryNo
    int             ChapterIndex;                   // 章节代码，序章-3章-间章-4章-终章 0-3-4-5-6
    int             ScenaNameIndex;                 // 场景名称代码
    FSeek(startof(placeTable.place[ScenaNameIndex]));
    string          ScenaName;

    //FSeek(addrCScript + 0x314);
    //int               EXPR_20_45;

    FSeek(addrTemp);
} MENU;

    //FSeek(ProcessHeapToLocalAddress(ReadUInt(addrBase + 0x384EC) + 0x2CC));
FSeek(addrCActor);
MENU menu;

// 战斗中 各按钮是否可用等参数..DT
typedef struct
{
    local int   index = i;
    FSkip(0x30);
    ULONG   color <format=hex>;
    FSkip(0x62);
    ushort      battleButtonPar;    // 0 空心 字暗 1 实心  2 不可用 4 字亮，正常为 5可用7不可用
} BattleButton <read=readBattleButton>;

string readBattleButton(BattleButton &a)
{
    switch (a.index)
    {
    case 0:
        return "攻击";
        break;
    case 1:
        return "战技";
        break;
    case 2:
        return "道具";
        break;
    case 3:
        return "撤退";
        break;
    case 4:
        return "移动";
        break;
    case 5:
        return "魔法";
        break;
    case 6:
        return "爆灵";
        break;
    default:
        return "nul";
    }
};

typedef struct
{
    local int i = 0;
    FSkip(0x28);
    for (i = 0; i < 9; i++)
    {
        BattleButton    battleButton;   // 依次为 攻击、战技、道具、撤退、移动、魔法
    }
} BattleButtonGroup;

// CBattle
if (FSeekHeap(addrMemCBattle) >= 0)
{
    local ULONG addrCBattleLocal    = FTell();
    #define addrBattleStart addrCBattleLocal

    //FSeek(addrCBattleLocal + 0xAC);
    //string            BattleMap;

    FSeek(addrCBattleLocal + 0x4DE4);
    if (!exists(i))
    {
        local ULONG i;
    }
    for (i = 0; i == ReadUShort(FTell()); ++i)
    //for (i = 0; i < 23; ++i)
    {
        if (ReadUInt(FTell() + 0x10) == 0 &&
            ReadUInt(FTell() + 0x14) == 0 &&
            ReadUInt(FTell() + 0x18) == 0)
            CHR_BATTLE_INF  ChrBattleInf    <hidden=true>;
        else
            CHR_BATTLE_INF  ChrBattleInf;
    }

    FSeek(addrCBattleLocal + 0x103148);
    CBattleATBar    ATBar;

        FSeek(addrBattleStart + 0x113080);
        int         CurrentChrIndex;

        FSeek(addrBattleStart + 0x113090);
        int         CurrentTargetIndex;

        FSeek(addrBattleStart + 0xC36D8);
        byte        BattleStartCondition;   // 战斗开场状况 0 普通, 1 被偷袭, 02 先制, 04 奇袭, 可以锁定..

        FSeek(addrBattleStart + 0xC3104);
        BattleButtonGroup   battleButton;
}

/*
#include "ao_save_system.bt"
FSeek(addrBase);
MemorySystemData memorySystemData;
//FSeek(getPtrValueH0(0xDC850C));
FSeek(ProcessHeapToLocalAddress(0x24432270));
LocalSystemData localSystemData;
*/

//#include "ao_poker.bt"

FSeek(addrT_crfget);
ubyte byteT_crfget;
FSeek(addrT_crfget_entry);
ubyte byteT_crfget_entry;
FSeek(addrT_ittxt);
ubyte byteT_ittxt;